{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PRIYA\\\\Downloads\\\\code_contribution_final\\\\Client\\\\src\\\\components\\\\divs\\\\divs_eka.jsx\";\nimport \"../division/nik_div.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Div_eka() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"body\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: title,\n      children: \"Rules For Determining Ekadhikas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 5,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Given below are the rules to determine the Ekadhikas of various numbers. For convenience Ekadhikas can be denoted by \\\"P\\\"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n      style: Olist,\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"For numbers ending with 9 :- 9, 19, 29... The Ekadhika is determined by adding 1 to the numbers and then dividing by 10. (eg) P of 29 is 29+1=30. 30 / 10 = 3.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"For numbers ending with 3:- 3, 13, 23....Multiply by 3 to get numbers ending with 9. Then follow the above rule to get the Ekadhikas. P of 13 is:- 13 x 3= 39. 39+1=40. 40/10=4. P of 13 is 4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 9,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"For numbers ending with 7:- 7, 17, 27....Multiply by 7 to get numbers ending with 9. Then follow the first rule. (eg) Ekadhika of 17 is :- 17 x 7=119. 119+1=120. 120/10=12 . P of 17 is 12.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"For Numbers Ending with 1:-1, 11, 21....Multiply with 9 to get numbers ending with 9. Then follow the usual rule\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Simplification:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Consider the problem:- Is 4379 divisible by 29 ?\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"The Standard procedure would be:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n      style: Olist,\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Determine the Ekadhika of 29:---------29+1=30. 30/10=3. P = 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \" Multiply the Units digit of 437 9 by 3:----9 x 3 = 27\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \"Add tens digit of 43 79 to 27:------------27+7 = 34\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"At this stage the standard procedure would be to multiply 34 by 3 and add 3. How ever this results in a very cumbersome process. To avoid this, take the remainder of 34 when divided by 29 ( the original number ) to get 5. The procedure is carried out with 5 instead.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \" Multiply 5 by 3 to obtain 15--------------5 x 3 = 15\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \" Add Hundreds Digit of 4 379 to 15-------15 + 3 = 18\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \" Multiply 18 by 3 to get 54----------------18 x 3 = 54\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        children: \" Add Thousands digit of 4379 to 54--------4 + 54 = 58\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"58 is divisible by 29. So 4379 is divisible by 29.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          'color': 'yellow',\n          'background-color': 'black'\n        },\n        children: \"The simplification method is:-\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 16\n      }, this), \" At any point of time during the application of the procedure, for determining the divisibility of a number N by a number M if the intermediate result becomes cumbesome, the remainder of the result when divided by M can be used instead of the result itself.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"This technique is simple as long as the Ekadhikas are sufficiently small.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 4,\n    columnNumber: 9\n  }, this);\n}\n_c = Div_eka;\nconst Olist = {\n  listStyleType: 'decimal',\n  marginLeft: '200px'\n};\nconst title = {\n  marginLeft: '40%'\n};\nvar _c;\n$RefreshReg$(_c, \"Div_eka\");","map":{"version":3,"names":["jsxDEV","_jsxDEV","Div_eka","className","children","style","title","fileName","_jsxFileName","lineNumber","columnNumber","Olist","_c","listStyleType","marginLeft","$RefreshReg$"],"sources":["C:/Users/PRIYA/Downloads/code_contribution_final/Client/src/components/divs/divs_eka.jsx"],"sourcesContent":["import \"../division/nik_div.css\"\r\nexport default function Div_eka(){\r\n    return(\r\n        <div className=\"body\">\r\n            <h1 style={title}>Rules For Determining Ekadhikas</h1>\r\n            <p>Given below are the rules to determine the Ekadhikas of various numbers. For convenience Ekadhikas can be denoted by \"P\"</p>\r\n            <ol style={Olist}>\r\n                <li>For numbers ending with 9 :- 9, 19, 29... The Ekadhika is determined by adding 1 to the numbers and then dividing by 10. (eg) P of 29 is 29+1=30. 30 / 10 = 3.</li>\r\n                <li>For numbers ending with 3:- 3, 13, 23....Multiply by 3 to get numbers ending with 9. Then follow the above rule to get the Ekadhikas. P of 13 is:- 13 x 3= 39. 39+1=40. 40/10=4. P of 13 is 4</li>\r\n                <li>For numbers ending with 7:- 7, 17, 27....Multiply by 7 to get numbers ending with 9. Then follow the first rule. (eg) Ekadhika of 17 is :- 17 x 7=119. 119+1=120. 120/10=12 . P of 17 is 12.</li>\r\n                <li>For Numbers Ending with 1:-1, 11, 21....Multiply with 9 to get numbers ending with 9. Then follow the usual rule</li>\r\n            </ol>\r\n            <h3>Simplification:</h3>\r\n            <p>Consider the problem:- Is 4379 divisible by 29 ?</p>\r\n            <p>The Standard procedure would be:</p>\r\n            <ol style={Olist}>\r\n                <li>Determine the Ekadhika of 29:---------29+1=30. 30/10=3. P = 3</li>\r\n                <li> Multiply the Units digit of 437 9 by 3:----9 x 3 = 27</li>\r\n                <li>Add tens digit of 43 79 to 27:------------27+7 = 34</li>\r\n                <p>At this stage the standard procedure would be to multiply 34 by 3 and add 3. How ever this results in a very cumbersome process. To avoid this, take the remainder of 34 when divided by 29 ( the original number ) to get 5. The procedure is carried out with 5 instead.</p>\r\n                <li> Multiply 5 by 3 to obtain 15--------------5 x 3 = 15</li>\r\n                <li> Add Hundreds Digit of 4 379 to 15-------15 + 3 = 18</li>\r\n                <li> Multiply 18 by 3 to get 54----------------18 x 3 = 54</li>\r\n                <li> Add Thousands digit of 4379 to 54--------4 + 54 = 58</li>\r\n            </ol>\r\n            <p>58 is divisible by 29. So 4379 is divisible by 29.</p>\r\n            <p><span style={{'color':'yellow','background-color':'black'}}>The simplification method is:-</span> At any point of time during the application of the procedure, for determining the divisibility of a number N by a number M if the intermediate result becomes cumbesome, the remainder of the result when divided by M can be used instead of the result itself.</p>\r\n            <p>This technique is simple as long as the Ekadhikas are sufficiently small.</p>\r\n        </div>\r\n    )\r\n\r\n}\r\nconst Olist = {\r\n    listStyleType:'decimal',\r\n    marginLeft:'200px'\r\n}\r\n\r\nconst title={\r\n    marginLeft:'40%'\r\n  }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}