{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\YUVARAJ T\\\\Desktop\\\\Final_before_review\\\\Final_fina_fully_reviewed\\\\Client\\\\src\\\\components\\\\division\\\\Div_not_9.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport './nik_div.css';\nimport Sidenavbar from '../Sidenavbar/Sidenavbar';\nimport { useNavigate } from \"react-router-dom\";\nimport ex_1 from '../../images/div_not_9_ex001.gif';\nimport ex_2 from '../../images/div_not_9_exo2.gif';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Div_not_9 = () => {\n  _s();\n  const navigate = useNavigate();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Sidenavbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"body\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        class: \"main_heading\",\n        children: \"DIVISION WHEN DIVISOR IS NOT 9\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"For divisors other than 9 the nikhilam sutra ( all from 9 and the last from 10 is used ). For 9, subtracting 9 from 10 we get 1 as the multiplier.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" Consider the problem 23 \\xF7  9 .\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \" We write the tens digit as such. \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Then multiply it by 1 (multiplier) to get 2\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Add it to 3 to get 5 as the remainder.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"In case if 23 \\xF7 8:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"First , write the tens digit as such.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Multiply it by 2 ( 10-8=2, the multiplier in this case ) to get 4. \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Add it to 3 to get 7 as the remainder. Quotient is 2 and remainder is 7.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        class: \"img-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: ex_1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 28\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"In this technique, if the remainder exceeds the divisor, carry out the procedure as already illustrated.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Other examples. 1223 divided by 98.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Here the last two digits are marked as remainders.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        class: \"img-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: ex_2\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 28\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"A limitation of the nikhilam method is that, it is suitable only for numbers close to 10, 100 ,1000 and so on. But a general technique called Urdhva Tiryaka  exists for handling general division.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          'margin-left': '35%'\n        },\n        className: \"back\",\n        onClick: () => navigate(-1),\n        children: \"Back to NIKILAM page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 116\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n};\n_s(Div_not_9, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n  return [useNavigate];\n});\n_c = Div_not_9;\nexport default Div_not_9;\nvar _c;\n$RefreshReg$(_c, \"Div_not_9\");","map":{"version":3,"names":["React","Sidenavbar","useNavigate","ex_1","ex_2","jsxDEV","_jsxDEV","Div_not_9","_s","navigate","children","fileName","_jsxFileName","lineNumber","columnNumber","className","class","src","style","onClick","_c","$RefreshReg$"],"sources":["C:/Users/YUVARAJ T/Desktop/Final_before_review/Final_fina_fully_reviewed/Client/src/components/division/Div_not_9.js"],"sourcesContent":["import React from 'react'\r\nimport './nik_div.css'\r\nimport Sidenavbar from '../Sidenavbar/Sidenavbar'\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport ex_1 from '../../images/div_not_9_ex001.gif'\r\nimport ex_2 from '../../images/div_not_9_exo2.gif'\r\nconst Div_not_9 = () => {\r\n    const navigate=useNavigate();\r\n  return (\r\n    <div>\r\n    <Sidenavbar/>\r\n    <div className=\"body\">\r\n    <h3 class='main_heading'>DIVISION WHEN DIVISOR IS NOT 9</h3>\r\n    <hr/>\r\n    <p>For divisors other than 9 the nikhilam sutra ( all from 9 and the last from 10 is used ). \r\n        For 9, subtracting 9 from 10 we get 1 as the multiplier.\r\n    </p>\r\n    <p> Consider the problem 23 รท  9 .</p>\r\n    <ol>\r\n        <li> We write the tens digit as such. </li>\r\n        <li>Then multiply it by 1 (multiplier) to get 2</li>\r\n        <li>Add it to 3 to get 5 as the remainder.</li>\r\n    </ol>\r\n    <p>In case if 23 รท 8:</p>\r\n    <ol>\r\n        <li>First , write the tens digit as such.</li>\r\n        <li>Multiply it by 2 ( 10-8=2, the multiplier in this case ) to get 4. </li>\r\n        <li>Add it to 3 to get 7 as the remainder. Quotient is 2 and remainder is 7.</li>\r\n    </ol>\r\n    <p class='img-wrapper'><img src={ex_1}/></p>\r\n    <p>In this technique, if the remainder exceeds the divisor, carry out the procedure as already illustrated.</p>\r\n    <p>Other examples. 1223 divided by 98.</p>\r\n    <p>Here the last two digits are marked as remainders.</p>\r\n    <p class='img-wrapper'><img src={ex_2}/></p>\r\n    <p>A limitation of the nikhilam method is that, it is suitable only for numbers close to 10, 100 ,1000 and so on. \r\n        But a general technique called Urdhva Tiryaka  exists for handling general division.\r\n    </p>\r\n    <button style={{'margin-left':'35%'}} className=\"back\" onClick={()=>navigate(-1)}>Back to NIKILAM page</button><br/>\r\n    <br/>\r\n    </div>\r\n</div>\r\n  )\r\n}\r\n\r\nexport default Div_not_9\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}